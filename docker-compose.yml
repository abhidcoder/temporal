version: '3.8'

services:
  # Temporal Server
  temporal:
    image: temporalio/auto-setup:1.22.3
    ports:
      - "7233:7233"
      - "8233:8233"
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
    depends_on:
      - postgresql
    networks:
      - temporal-network

  # PostgreSQL for Temporal
  postgresql:
    image: postgres:13
    environment:
      POSTGRES_PASSWORD: temporal
      POSTGRES_USER: temporal
      POSTGRES_DB: temporal
    ports:
      - "5432:5432"
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    networks:
      - temporal-network

  # Your Application Server
  app-server:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_TASK_QUEUE=superzop-sync-queue
      - DB_HOST=mysql
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - BASE_URL=${BASE_URL}
      - ORDERING_APP_BASE_URL=${ORDERING_APP_BASE_URL}
    depends_on:
      - temporal
      - mysql
    networks:
      - temporal-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Your Application Worker
  app-worker:
    build: .
    command: npm run worker
    environment:
      - NODE_ENV=production
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_TASK_QUEUE=superzop-sync-queue
      - DB_HOST=mysql
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - BASE_URL=${BASE_URL}
      - ORDERING_APP_BASE_URL=${ORDERING_APP_BASE_URL}
    depends_on:
      - temporal
      - mysql
    networks:
      - temporal-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "-f", "worker.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MySQL Database
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - temporal-network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis (optional, for caching)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - temporal-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgresql_data:
  mysql_data:

networks:
  temporal-network:
    driver: bridge 